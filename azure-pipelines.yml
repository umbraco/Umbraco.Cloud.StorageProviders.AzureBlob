variables:
    buildConfiguration: Release
    slnFilename: Umbraco.Cloud.StorageProviders.AzureBlob.sln
stages:
    - stage: Artifacts
      dependsOn: []
      jobs:
          - job: Build_Artifacts
            displayName: Build Artifacts
            pool:
                vmImage: windows-latest
            steps:
                - task: UseDotNet@2
                  displayName: Use .Net Core sdk 5.x
                  inputs:
                      version: 5.x
                - task: NuGetToolInstaller@1
                  displayName: Use NuGet Latest
                - task: NuGetCommand@2
                  displayName: Restore NuGet Packages
                  inputs:
                      restoreSolution: $(slnFilename)
                      feedsToUse: config
                - task: PowerShell@1
                  displayName: Update Version and Artifact Name
                  inputs:
                      scriptType: inlineScript
                      inlineScript: >
                        Write-Host "Working folder: $pwd"

                        $ubuild = build/build.ps1 -get -continue


                        $version = $ubuild.GetUmbracoVersion()

                        $isRelease = [regex]::matches($env:BUILD_SOURCEBRANCH,"v\d+\/\d+.\d+.*")


                        if ($isRelease.Count -gt 0){
                          $continuous = $version.Semver
                          Write-Host "##vso[build.addbuildtag]Release build"
                        }
                        else
                        {
                            $date = (Get-Date).ToString("yyyyMMdd")
                            $continuous = "$($version.release)-preview$date.$(Build.BuildId)"
                            $ubuild.SetUmbracoVersion($continuous)

                            Write-Host "##vso[build.addbuildtag]Continuous build"
                          }

                        Write-Host "##vso[build.updatebuildnumber]$continuous.$(Build.BuildId)"

                        Write-Host "Building: $continuous"
                - task: PowerShell@1
                  displayName: Prepare Build
                  inputs:
                      scriptType: inlineScript
                      inlineScript: |
                          Write-Host "Working folder: $pwd"
                          $ubuild = build\build.ps1 -get

                          $ubuild.PrepareBuild("vso")
                - task: PowerShell@1
                  displayName: Prepare Packages & Zip
                  inputs:
                      scriptType: inlineScript
                      inlineScript: |
                          Write-Host "Working folder: $pwd"
                          $ubuild = build\build.ps1 -get -continue

                          $ubuild.CompileUmbracoCloudStorageProvidersAzureBlob()
                          $ubuild.PreparePackages()
                - task: PowerShell@1
                  displayName: Verify & Package NuGet
                  inputs:
                      scriptType: inlineScript
                      inlineScript: |
                          Write-Host "Working folder: $pwd"
                          $ubuild = build\build.ps1 -get -continue

                          $ubuild.PackageNuGet()
                - task: CopyFiles@2
                  displayName: Copy NuPkg Files to Staging
                  inputs:
                      SourceFolder: build.out
                      Contents: '*.nupkg'
                      TargetFolder: $(build.artifactstagingdirectory)
                      CleanTargetFolder: true
                      
                - task: DotNetCoreCLI@2
                  inputs:
                    command: 'push'
                    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
                    nuGetFeedType: 'internal'
                    publishVstsFeed: '886b20ce-f777-4d2a-a34e-704e21ecd94b'

                - task: CopyFiles@2
                  displayName: Copy Log Files to Staging
                  inputs:
                      SourceFolder: build.tmp
                      Contents: '*.log'
                      TargetFolder: $(build.artifactstagingdirectory)
                      CleanTargetFolder: true
                  condition: succeededOrFailed()
                - task: PublishBuildArtifacts@1
                  displayName: Publish Log Files
                  inputs:
                      PathtoPublish: $(build.artifactstagingdirectory)
                      ArtifactName: logs
                  condition: succeededOrFailed()